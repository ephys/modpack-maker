# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateModpackInput {
  minecraftVersion: String!
  modLoader: ModLoader!
  name: String!
}

type CreateModpackPayload {
  node: Modpack
}

type CreateNewModpackVersionError {
  code: CreateNewModpackVersionErrorCodes!
  message: String!
}

enum CreateNewModpackVersionErrorCodes {
  MODPACK_NOT_FOUND
}

input CreateNewModpackVersionInput {
  fromModpackVersion: ID!
  name: String!
}

type CreateNewModpackVersionPayload {
  error: CreateNewModpackVersionError
  node: ModpackVersion
}

enum DependencyType {
  breaks
  conflicts
  depends
  recommends
  suggests
}

type GqlModDependency {
  modId: String!
  type: DependencyType!
  versionRange: String
}

type ModJar {
  curseForgePage: String!
  downloadUrl: String!
  fileName: String!
  id: ID!
  mods(matchingModpack: ID): [ModVersion!]!
  releaseType: ReleaseType!

  """
  
        returns the list of jars from the same project that are considered updated versions to this jar.
      
  """
  updatedVersion(matchingModpack: ID!): [ModJar!]!
}

type ModJarEdge {
  cursor: String!
  node: ModJar!
}

enum ModLoader {
  FABRIC
  FORGE
}

type ModVersion {
  dependencies: [GqlModDependency!]!
  modId: String!
  modVersion: String!
  name: String!
  supportedMinecraftVersions: [String!]!
  supportedModLoader: ModLoader!
}

type Modpack {
  id: ID!
  lastVersion: ModpackVersion!
  lastVersionIndex: Int!
  minecraftVersion: String!
  modLoader: ModLoader!
  name: String!
  version(index: Int!): ModpackVersion
}

type ModpackMod {
  addedAt: String!
  isLibraryDependency: Boolean!
  jar: ModJar!
}

type ModpackVersion {
  downloadUrl: String!
  id: ID!
  installedJars: [ModpackMod!]!
  name: String!
  versionIndex: Int!
}

type Mutation {
  createModpack(input: CreateModpackInput!): CreateModpackPayload!
  createNewModpackVersion(input: CreateNewModpackVersionInput!): CreateNewModpackVersionPayload!
  removeJarFromModpack(input: RemoveJarFromModpackInput!): RemoveJarFromModpackPayload!
  replaceModpackJar(input: ReplaceModpackJarInput!): ReplaceModpackJarPayload!
  setModpackJarIsLibrary(input: SetModpackJarIsLibraryInput!): SetModpackJarIsLibraryPayload!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Project {
  description: String!
  homepage: String!
  iconUrl: String!
  jars: [ModJar!]!
  name: String!
  source: ProjectSource!
}

type ProjectConnection {
  edges: [ProjectEdge!]
  nodes: [Project!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type ProjectEdge {
  cursor: String!
  node: Project!
}

enum ProjectSearchSortOrder {
  FirstFileUpload
  LastFileUpload
  ProjectName
}

enum ProjectSearchSortOrderDirection {
  ASC
  DESC
}

enum ProjectSource {
  CURSEFORGE
  MODRINTH
}

type Query {
  modpack(id: ID!): Modpack
  modpacks: [Modpack!]!

  """
  
  *Returns project matching the search query.*  
  Uses [lucene syntax](https://lucene.apache.org/core/2_9_4/queryparsersyntax.html)
  
  ### Supported fields (mods):
  
  Mods fields combinations `(modLoader AND minecraftVersion)` are checked per-mod instead of per-project.
  this means that if a Project has two jars, one that supports modLoader and one that supports minecraftVersion, but not
  both at the same time, it will not be returned. A single jar needs to support both to be returned.
  
  - **modId** - returns only projects that have at least one jar containing this modId.
  - **modName** - returns only projects that have at least one jar containing one mod that matches modName.
  - **minecraftVersion** - returns only projects that have at least one jar containing one mod that supports minecraftVersion.
  - **modLoader** - returns only projects that have at least one jar containing one mod that uses this modLoader.
  
  ### Supported fields (projects):
  Project fields combinations are checked per-projects.
  
  - **projectName** - returns only projects that have at least one jar containing one mod that matches projectName.
  - **tags** - returns only projects that have this tag listed.
  - **source** - returns only projects that have been fetched from a specific source. Supported values: `modrinth` or `curseforge`.
  
  ---
  
  If no field is provided (Example 2), it'll be interpreted as a wildcard search on the projectName field.
  
  Example 1: `modId:magic-feather name:"Magic Feather" modLoader:FORGE minecraftVersion:(1.16.4 OR 1.16.5)`  
  Example 2: `Magic Feather` (interpreted as `projectName:"*Magic Feather*"`).
  
  ---
  
  The sort-order is query-aware. Meaning that if the query specifies a `minecraftVersion` or a `modLoader` field:
  
  - With FirstFileUpload, the date used for the sort order will be the date on the oldest file matching the query was uploaded.
     This can be used for eg. "sort by the date on which the projects first supported this minecraft version".
  - With LastFileUpload, the used for the sort order will be the date on the most recent file matching the query was uploaded.
     This can be used for eg. "sort by the date on which the projects last published an update compatible with this minecraft version".
  
  """
  projects(after: String, before: String, first: Int, last: Int, order: ProjectSearchSortOrder = ProjectName, orderDir: ProjectSearchSortOrderDirection = ASC, query: String): ProjectConnection!
}

enum ReleaseType {
  ALPHA
  BETA
  STABLE
}

type RemoveJarFromModpackError {
  code: RemoveJarFromModpackErrorCodes!
  message: String!
}

enum RemoveJarFromModpackErrorCodes {
  JAR_NOT_FOUND
  MODPACK_NOT_FOUND
}

input RemoveJarFromModpackInput {
  jar: ID!
  modpackVersion: ID!
}

type RemoveJarFromModpackPayload {
  error: RemoveJarFromModpackError
  node: ModpackVersion
}

type ReplaceModpackJarError {
  code: ReplaceModpackJarErrorCodes!
  message: String!
}

enum ReplaceModpackJarErrorCodes {
  JAR_NOT_FOUND
  MODPACK_NOT_FOUND
  NEW_JAR_NOT_FOUND
}

input ReplaceModpackJarInput {
  modpackVersion: ID!
  newJars: [ID!]!
  oldJar: ID!
}

type ReplaceModpackJarPayload {
  error: ReplaceModpackJarError
  node: ModpackVersion
}

type SetModpackJarIsLibraryError {
  code: SetModpackJarIsLibraryErrorCodes!
  message: String!
}

enum SetModpackJarIsLibraryErrorCodes {
  JAR_NOT_FOUND
  JAR_NOT_IN_MODPACK
  MODPACK_NOT_FOUND
}

input SetModpackJarIsLibraryInput {
  isLibrary: Boolean!
  jar: ID!
  modpackVersion: ID!
}

type SetModpackJarIsLibraryPayload {
  error: SetModpackJarIsLibraryError
  node: ModpackMod
}
